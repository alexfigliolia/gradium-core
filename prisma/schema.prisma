// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("_POSTGRES_TRANSACTION_URL")
  directUrl = env("_POSTGRES_SESSION_URL")
}

model MaintenaceImage {
  id                Int             @id @unique @default(autoincrement())
  url               String
  maintenanceItem   MaintenanceItem @relation(fields: [maintenanceItemId], references: [id])
  maintenanceItemId Int
}

model MaintenanceAssignment {
  id                Int             @id @unique @default(autoincrement())
  createdAt         DateTime        @default(now())
  deadline          DateTime?
  person            Person          @relation(fields: [personId], references: [id])
  personId          Int
  maintenanceItem   MaintenanceItem @relation(fields: [maintenanceItemId], references: [id])
  maintenanceItemId Int
}

model MaintenanceItem {
  id             Int                     @id @unique @default(autoincrement())
  createdAt      DateTime                @default(now())
  completedAt    DateTime
  cost           Float                   @default(0)
  title          String
  description    String
  organization   Organization            @relation(fields: [organizationId], references: [id])
  organizationId Int
  images         MaintenaceImage[]
  createdBy      Person                  @relation(fields: [personId], references: [id])
  personId       Int
  assignments    MaintenanceAssignment[]
  property       Property?               @relation(fields: [propertyId], references: [id])
  propertyId     Int?
  priority       MaintenanceItemPriority @default(high)
}

model RentPayment {
  id             Int          @id @unique @default(autoincrement())
  createdAt      DateTime     @default(now())
  value          Float
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  lease          Lease        @relation(fields: [leaseId], references: [id])
  leaseId        Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Lease {
  id               Int                  @id @unique @default(autoincrement())
  createdAt        DateTime             @default(now())
  start            DateTime
  end              DateTime
  price            Float
  lessees          User[]
  status           LeaseStatus
  paymentFrequency RentPaymentFrequency
  payments         RentPayment[]
  organization     Organization         @relation(fields: [organizationId], references: [id])
  organizationId   Int
  property         Property             @relation(fields: [propertyId], references: [id])
  propertyId       Int
  livingSpace      LivingSpace          @relation(fields: [livingSpaceId], references: [id])
  livingSpaceId    Int
}

model AmenityReservation {
  id            Int         @id @unique @default(autoincrement())
  price         Float
  date          DateTime
  start         String
  end           String
  amenity       Amenity     @relation(fields: [amenityId], references: [id])
  amenityId     Int
  livingSpace   LivingSpace @relation(fields: [livingSpaceId], references: [id])
  livingSpaceId Int
}

model AmenityFloorPlan {
  id        Int     @id @unique @default(autoincrement())
  url       String
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  amenityId Int
}

model AmenityImage {
  id        Int     @id @unique @default(autoincrement())
  url       String
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  amenityId Int
}

model Amenity {
  id                  Int                  @id @unique @default(autoincrement())
  name                String
  price               Float
  open                String
  close               String
  footage             String               @default("")
  billed              BillFrequency
  images              AmenityImage[]
  floorPlans          AmenityFloorPlan[]
  property            Property             @relation(fields: [propertyId], references: [id])
  propertyId          Int
  amenityReservations AmenityReservation[]
}

model LivingSpaceImage {
  id            Int         @id @unique @default(autoincrement())
  url           String
  livingSpace   LivingSpace @relation(fields: [livingSpaceId], references: [id])
  livingSpaceId Int
}

model LivingSpaceFloorPlan {
  id            Int         @id @unique @default(autoincrement())
  url           String
  livingSpace   LivingSpace @relation(fields: [livingSpaceId], references: [id])
  livingSpaceId Int
}

model LivingSpace {
  id                  Int                    @id @unique @default(autoincrement())
  name                String
  type                LivingSpaceType
  beds                Int
  baths               Float
  footage             String                 @default("")
  leases              Lease[]
  images              LivingSpaceImage[]
  amenityReservations AmenityReservation[]
  flootPlans          LivingSpaceFloorPlan[]
  property            Property               @relation(fields: [propertyId], references: [id])
  propertyId          Int
}

model PropertyImage {
  id         Int      @id @unique @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model PropertyFloorPlan {
  id         Int      @id @unique @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Property {
  id              Int                 @id @unique @default(autoincrement())
  slug            String              @unique
  name            String
  address1        String
  address2        String
  city            String
  state           String
  zipCode         String
  mapsLink        String              @default("")
  images          PropertyImage[]
  floorPlans      PropertyFloorPlan[]
  livingSpaces    LivingSpace[]
  amenities       Amenity[]
  lease           Lease[]
  organization    Organization        @relation(fields: [organizationId], references: [id])
  organizationId  Int
  MaintenanceItem MaintenanceItem[]
}

model Role {
  id       Int        @id @unique @default(autoincrement())
  role     PersonRole
  person   Person     @relation(fields: [personId], references: [id])
  personId Int
}

model Person {
  id                    Int                     @id @unique @default(autoincrement())
  organization          Organization            @relation(fields: [organizationId], references: [id])
  organizationId        Int
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  roles                 Role[]
  createdIssues         MaintenanceItem[]
  maintenanceAssignment MaintenanceAssignment[]
}

model Organization {
  id               Int               @id @unique @default(autoincrement())
  name             String            @default("")
  properties       Property[]
  people           Person[]
  maintenanceItems MaintenanceItem[]
  rentPayments     RentPayment[]
  leases           Lease[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model User {
  id           Int           @id @unique @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique()
  password     String
  leases       Lease[]
  rentPayments RentPayment[]
  affiliations Person[]
}

enum PersonRole {
  owner
  manager
  maintenance
  resident
}

enum LivingSpaceType {
  unit
  dwelling
}

enum BillFrequency {
  hour
  day
}

enum RentPaymentFrequency {
  day
  month
  year
}

enum LeaseStatus {
  complete
  inProgress
  terminated
  pending
}

enum MaintenanceItemPriority {
  immediate
  high
  low
}
