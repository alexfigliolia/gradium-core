// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_TRANSACTION_URL")
  directUrl = env("POSTGRES_SESSION_URL")
}

model ExpenseAttachment {
  id        Int     @id @unique @default(autoincrement())
  url       String
  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId Int
}

model ReservationCharge {
  id            Int                @id @unique @default(autoincrement())
  createdAt     DateTime           @default(now()) @db.Timestamptz(3)
  amount        Float
  person        Person             @relation(fields: [personId], references: [id])
  personId      Int
  reservation   AmenityReservation @relation(fields: [reservationId], references: [id])
  reservationId Int
}

model Expense {
  id          Int                 @id @unique @default(autoincrement())
  createdAt   DateTime            @default(now()) @db.Timestamptz(3)
  cost        String              @default("0")
  title       String              @default("")
  description String              @default("")
  deleted     Boolean             @default(false)
  attachments ExpenseAttachment[]
  tasks       ManagementTask[]
}

model TaskImage {
  id     Int            @id @unique @default(autoincrement())
  url    String
  task   ManagementTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
}

model ManagementTask {
  id             Int                  @id @unique @default(autoincrement())
  createdAt      DateTime             @default(now()) @db.Timestamptz(3)
  title          String
  description    String
  status         ManagementTaskStatus
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId Int
  deleted        Boolean              @default(false)
  images         TaskImage[]
  createdBy      Person               @relation(fields: [personId], references: [id])
  personId       Int
  property       Property?            @relation(fields: [propertyId], references: [id])
  propertyId     Int?
  priority       TaskPriority         @default(high)
  assignedTo     StaffProfile?        @relation(fields: [assignStaffId], references: [id])
  assignStaffId  Int?
  expenses       Expense[]
}

model RentPayment {
  id             Int          @id @unique @default(autoincrement())
  createdAt      DateTime     @default(now()) @db.Timestamptz(3)
  value          Float
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  lease          Lease        @relation(fields: [leaseId], references: [id])
  leaseId        Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Lease {
  id               Int                  @id @unique @default(autoincrement())
  createdAt        DateTime             @default(now()) @db.Timestamptz(3)
  start            String
  end              String
  price            Float
  lessees          User[]
  status           LeaseStatus
  paymentFrequency RentPaymentFrequency
  deleted          Boolean              @default(false)
  payments         RentPayment[]
  organization     Organization         @relation(fields: [organizationId], references: [id])
  organizationId   Int
  property         Property             @relation(fields: [propertyId], references: [id])
  propertyId       Int
  livingSpace      LivingSpace          @relation(fields: [livingSpaceId], references: [id])
  livingSpaceId    Int
}

model AmenityReservation {
  id        Int                 @id @unique @default(autoincrement())
  date      String
  start     String
  end       String
  cancelled Boolean             @default(false)
  amenity   Amenity             @relation(fields: [amenityId], references: [id])
  amenityId Int
  person    Person              @relation(fields: [personId], references: [id])
  personId  Int
  charges   ReservationCharge[]
}

model AmenityFloorPlan {
  id        Int     @id @unique @default(autoincrement())
  url       String
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int
}

model AmenityImage {
  id        Int     @id @unique @default(autoincrement())
  url       String
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int
}

model Amenity {
  id           Int                  @id @unique @default(autoincrement())
  name         String               @default("")
  price        String               @default("0")
  open         String
  close        String
  capacity     Int                  @default(0)
  billed       BillFrequency        @default(hour)
  deleted      Boolean              @default(false)
  images       AmenityImage[]
  floorPlans   AmenityFloorPlan[]
  property     Property             @relation(fields: [propertyId], references: [id])
  propertyId   Int
  reservations AmenityReservation[]
}

model LivingSpaceImage {
  id            Int         @id @unique @default(autoincrement())
  url           String
  livingSpace   LivingSpace @relation(fields: [livingSpaceId], references: [id], onDelete: Cascade)
  livingSpaceId Int
}

model LivingSpaceFloorPlan {
  id            Int         @id @unique @default(autoincrement())
  url           String
  livingSpace   LivingSpace @relation(fields: [livingSpaceId], references: [id], onDelete: Cascade)
  livingSpaceId Int
}

model LivingSpace {
  id         Int                    @id @unique @default(autoincrement())
  name       String                 @default("")
  type       LivingSpaceType        @default(unit)
  beds       Int                    @default(0)
  baths      Float                  @default(0)
  size       String                 @default("0")
  deleted    Boolean                @default(false)
  leases     Lease[]
  images     LivingSpaceImage[]
  floorPlans LivingSpaceFloorPlan[]
  property   Property               @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model PropertyAddon {
  id         Int               @id @unique @default(autoincrement())
  type       PropertyAddonType
  property   Property          @relation(fields: [propertyId], references: [id])
  propertyId Int

  @@unique([propertyId, type])
}

model PropertyImage {
  id         Int      @id @unique @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Property {
  id              Int              @id @unique @default(autoincrement())
  slug            String
  name            String
  address1        String           @default("")
  address2        String           @default("")
  city            String           @default("")
  state           String           @default("")
  zipCode         String           @default("")
  mapsLink        String           @default("")
  deleted         Boolean          @default(false)
  images          PropertyImage[]
  livingSpaces    LivingSpace[]
  amenities       Amenity[]
  lease           Lease[]
  organization    Organization     @relation(fields: [organizationId], references: [id])
  organizationId  Int
  managementTasks ManagementTask[]
  staffMembers    StaffProfile[]
  addons          PropertyAddon[]
}

model StaffInvite {
  id             Int          @id @unique @default(autoincrement())
  email          String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Role {
  id       Int        @id @unique @default(autoincrement())
  role     PersonRole
  person   Person     @relation(fields: [personId], references: [id])
  personId Int
}

model StaffProfile {
  id             Int              @id @unique @default(autoincrement())
  userId         Int
  organizationId Int
  person         Person           @relation(fields: [personId], references: [id])
  personId       Int
  propertyAccess Property[]
  assignments    ManagementTask[]

  @@unique([organizationId, userId])
}

model Person {
  id                  Int                  @id @unique @default(autoincrement())
  organization        Organization         @relation(fields: [organizationId], references: [id])
  organizationId      Int
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int
  roles               Role[]
  createdTasks        ManagementTask[]
  linkedEmail         LinkedEmail          @relation(fields: [linkedEmailId], references: [id])
  linkedEmailId       Int
  amenityReservations AmenityReservation[]
  reservationCharges  ReservationCharge[]
  staffProfile        StaffProfile[]

  @@unique(name: "identity", [organizationId, userId])
}

model Organization {
  id           Int              @id @unique @default(autoincrement())
  name         String           @default("")
  properties   Property[]
  people       Person[]
  tasks        ManagementTask[]
  rentPayments RentPayment[]
  leases       Lease[]
  deleted      Boolean          @default(false)
  createdAt    DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime         @updatedAt @db.Timestamptz(3)
  staffInvites StaffInvite[]
}

model LinkedEmail {
  id        Int      @id @unique @default(autoincrement())
  email     String   @unique
  verified  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  person    Person[]
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model User {
  id           Int           @id @unique @default(autoincrement())
  createdAt    DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
  name         String
  password     String
  deleted      Boolean       @default(false)
  leases       Lease[]
  rentPayments RentPayment[]
  affiliations Person[]
  emails       LinkedEmail[]
}

enum PersonRole {
  owner
  manager
  maintenance
  resident
}

enum LivingSpaceType {
  unit
  dwelling
}

enum BillFrequency {
  hour
  day
}

enum RentPaymentFrequency {
  day
  month
  year
}

enum LeaseStatus {
  complete
  inProgress
  terminated
  pending
}

enum TaskPriority {
  immediate
  high
  low
}

enum ManagementTaskStatus {
  todo
  inProgress
  underReview
  complete
}

enum PropertyAddonType {
  packageManagement
  amenityReservations
  propertyEvents
  leaseManagement
  hoaManagement
}
